# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest

# Where to find user code.
USER_CODE_DIR = ../code

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# target path
OBJ_ROOT = ../build
OBJ_MODULE = $(OBJ_ROOT)/tdd
OBJ_UTEST  = $(OBJ_ROOT)/utest

# Module Code
MODULE_SOURCE_PATH  = $(USER_CODE_DIR)/tdd/source
MODULE_SOURCE_FILES = $(wildcard $(MODULE_SOURCE_PATH)/*.c) 
MODULE_INCLUDE_PATH = $(USER_CODE_DIR)/tdd/include

# Utest Code
UTEST_SOURCE_PATH  = $(USER_CODE_DIR)/utest/source
UTEST_SOURCE_FILES = $(wildcard $(UTEST_SOURCE_PATH)/*.cpp)
UTEST_INCLUDE_PATH = $(USER_CODE_DIR)/utest/include

# All .o file
MODULE_ALL_O = $(patsubst %.c,$(OBJ_MODULE)/%.o,$(notdir $(MODULE_SOURCE_FILES)))
UTEST_ALL_O =  $(patsubst %.cpp,$(OBJ_UTEST)/%.o,$(notdir $(UTEST_SOURCE_FILES)))
# All Include Path
ALL_PATH_INCLUDE = $(UTEST_INCLUDE_PATH) \
                   -I$(MODULE_INCLUDE_PATH)
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = tdd_unitest
# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.
	


all : $(TESTS)

clean :
	@echo $(ALL_PATH_INCLUDE)
	rm -f $(TESTS) gtest.a gtest_main.a $(MODULE_ALL_O) $(UTEST_ALL_O)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a tdd test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(OBJ_MODULE)/%.o : $(MODULE_SOURCE_PATH)/%.c 
	$(CXX) $(CPPFLAGS) -I$(ALL_PATH_INCLUDE) $(CXXFLAGS) -c $< -o $@
	
$(OBJ_UTEST)/%.o : $(UTEST_SOURCE_PATH)/%.cpp 
	$(CXX) $(CPPFLAGS) -I$(ALL_PATH_INCLUDE)  $(CXXFLAGS) -c $< -o $@	

$(TESTS) : gtest_main.a $(MODULE_ALL_O) $(UTEST_ALL_O) 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
